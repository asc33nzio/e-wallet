// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	entity "e-wallet/entities"

	mock "github.com/stretchr/testify/mock"
)

// GachaRepository is an autogenerated mock type for the GachaRepository type
type GachaRepository struct {
	mock.Mock
}

// CheckAttempt provides a mock function with given fields: userId
func (_m *GachaRepository) CheckAttempt(userId int32) (int32, error) {
	ret := _m.Called(userId)

	var r0 int32
	if rf, ok := ret.Get(0).(func(int32) int32); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChooseBox provides a mock function with given fields: boxes
func (_m *GachaRepository) ChooseBox(boxes []entity.GachaBox) (int32, error) {
	ret := _m.Called(boxes)

	var r0 int32
	if rf, ok := ret.Get(0).(func([]entity.GachaBox) int32); ok {
		r0 = rf(boxes)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]entity.GachaBox) error); ok {
		r1 = rf(boxes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreditBalance provides a mock function with given fields: uid, amount
func (_m *GachaRepository) CreditBalance(uid int32, amount float64) error {
	ret := _m.Called(uid, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, float64) error); ok {
		r0 = rf(uid, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeductAttempt provides a mock function with given fields: userId
func (_m *GachaRepository) DeductAttempt(userId int32) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneUserById provides a mock function with given fields: userId
func (_m *GachaRepository) FindOneUserById(userId int32) (*entity.UserCompact, error) {
	ret := _m.Called(userId)

	var r0 *entity.UserCompact
	if rf, ok := ret.Get(0).(func(int32) *entity.UserCompact); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserCompact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGachaList provides a mock function with given fields:
func (_m *GachaRepository) GetGachaList() ([]entity.GachaBox, error) {
	ret := _m.Called()

	var r0 []entity.GachaBox
	if rf, ok := ret.Get(0).(func() []entity.GachaBox); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.GachaBox)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
